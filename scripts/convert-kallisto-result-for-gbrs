#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import logging
import numpy as np


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", '--quant-file', action='store', dest='quantfile', type=str, required=True)
    parser.add_argument('-s', '--strains', action='store', dest='strains', type=str, required=True)
    parser.add_argument('-t', '--tid-file', action='store', dest='tidfile', type=str, default=None)
    parser.add_argument('-g', '--group-file', action='store', dest='grpfile', type=str, default=None)
    parser.add_argument("-o", action='store', dest='outfile', type=str, default=None)
    parser.add_argument("-v", "--verbose", help="Toggle DEBUG verbosity", action="store_true")
    return parser.parse_args()


def main(args, loglevel):

    logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)
    logging.debug("Conversion requested: %s" % args.quantfile)

    logging.info("Reading in transcript IDs...")
    tname = np.loadtxt(args.tidfile, usecols=(0,), dtype='string')
    num_transcripts = len(tname)
    tid = dict(zip(tname, np.arange(num_transcripts)))
    logging.info("Getting suffices for strains...")
    strains = args.strains.split(',')
    num_strains = len(strains)
    hid = dict(zip(args.strains, np.arange(num_strains)))

    logging.info("Reading in kallisto quant result...")
    # qmat = np.zeros((num_transcripts, num_strains))
    # with open(args.quantfile) as fh:
    #     fh.next()  # header
    #     for curline in fh:
    #         item = curline.rstrip().split('\t')
    #         t, h = item[0].split('_')
    #         qmat[tid[t], hid[h]] = float(item[4])


if __name__ == '__main__':

    arguments = parse_args()

    # Setup logging
    if arguments.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    sys.exit(main(arguments, log_level))

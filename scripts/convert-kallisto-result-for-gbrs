#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import argparse
import logging
import numpy as np


def parse_args():
    parser = argparse.ArgumentParser(description="Does a thing to some stuff.",
                                     epilog="As an alternative to the commandline like '%(prog)s @params.conf'.",
                                     fromfile_prefix_chars='@')
    parser.add_argument("argument", help="pass ARG to the program", metavar="ARG")
    parser.add_argument("-i", '--kallisto-quant-file', action='store', dest='quantfile', type=str, required=True)
    parser.add_argument("-o", action='store', dest='outfile', type=str, default=None)
    parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
    parser.add_argument("-v", "--verbose", action="count", default=0, help="Increase verbosity", dest="verbosity")
    return parser.parse_args()


def main(args, loglevel):

    logging.basicConfig(format="%(levelname)s: %(message)s", level=loglevel)

    # TODO Replace this with your actual code.
    print "Hello there."
    logging.info("You passed an argument.")
    logging.debug("Your Argument: %s" % args.argument)

    tname = np.loadtxt('/data/kbchoi/data/mm10/R84-REL1505/ref/emase.transcripts.info', usecols=(0,), dtype='string')
    num_transcripts = len(tname)
    tid = dict(zip(tname, np.arange(num_transcripts)))
    hname = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')
    num_strains = len(hname)
    hid = dict(zip(hname, np.arange(num_strains)))

    qmat = np.zeros((num_transcripts, num_strains))
    with open(f) as fh:
        fh.next()  # header
        for curline in fh:
            item = curline.rstrip().split('\t')
            t, h = item[0].split('_')
            qmat[tid[t], hid[h]] = float(item[4])


if __name__ == '__main__':

    args = parse_args()

    # Setup logging
    if args.verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    sys.exit(main(args, loglevel))

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import gbrs


logo_text = """
        _
       | |
   __ _| |__  _ __ ___
  / _` | '_ \| '__/ __|
 | (_| | |_) | |  \__ \\
  \__, |_.__/|_|  |___/
   __/ |
  |___/     Ver.:%s

""" % gbrs.__version__


#
# Subcommand: hybridize
#
def add_subcommand_hybridize(subparsers):
    subparser_hyb = subparsers.add_parser('hybridize')
    subparser_hyb.set_defaults(func=gbrs.emase_utils.hybridize)


#
# Subcommand: align
#
def add_subcommand_align(subparsers):
    subparser_aln = subparsers.add_parser('align')
    subparser_aln.set_defaults(func=gbrs.emase_utils.align)


#
# Subcommand: bam2emase
#
def add_subcommand_bam2emase(subparsers):
    subparser_b2e = subparsers.add_parser('bam2emase')
    subparser_b2e.set_defaults(func=gbrs.emase_utils.bam2emase)


#
# Subcommand: quantify
#
def add_subcommand_quantify(subparsers):
    subparser_quan = subparsers.add_parser('quantify')
    subparser_quan.add_argument('-i', action='store', dest='alnfile', type=str, required=True)
    subparser_quan.add_argument('-g', action='store', dest='grpfile', type=str, required=True)
    subparser_quan.add_argument('-L', action='store', dest='lenfile', type=str, required=True)
    subparser_quan.add_argument('-M', action='store', dest='multiread_model', type=int, default=4)
    subparser_quan.add_argument('-o', action='store', dest='outbase', type=str, default='emase')
    subparser_quan.add_argument('-p', action='store', dest='pseudocount', type=float, default=0.0)
    subparser_quan.add_argument('-r', action='store', dest='read_length', type=int, default=100)
    subparser_quan.add_argument('-m', action='store', dest='max_iters', type=int, default=999)
    subparser_quan.add_argument('-t', action='store', dest='tolerance', type=float, default=0.0001)
    subparser_quan.add_argument('-c', action='store', dest='report_alignment_counts', type=bool, default=False)
    subparser_quan.add_argument('-w', action='store', dest='report_posterior', type=bool, default=False)
    subparser_quan.set_defaults(func=gbrs.emase_utils.quantify)


#
# Subcommand: mask
#
def add_subcommand_mask(subparsers):
    subparser_mask = subparsers.add_parser('mask')
    subparser_mask.add_argument('-i', action='store', dest='alnfile', type=str, required=True)
    subparser_mask.add_argument('-g', action='store', dest='grpfile', type=str, required=True)
    subparser_mask.add_argument('-G', '--genotype', action='store', dest='gtypefile', type=str, default=None)
    subparser_mask.add_argument('-o', action='store', dest='outfile', type=str, default='gbrs.diploid.h5')
    subparser_mask.set_defaults(func=gbrs.emase_utils.mask)


#
# Subcommand: reconstruct
#
def add_subcommand_reconstruct(subparsers):
    subparser_rec = subparsers.add_parser('reconstruct')
    subparser_rec.add_argument('-e', action='store', dest='exprfile', type=str, required=True)
    subparser_rec.add_argument('-x', action='store', dest='avecfile', type=str, required=True)
    subparser_rec.add_argument('-g', action='store', dest='gidfile', type=str, required=True)
    subparser_rec.add_argument('-t', action='store', dest='tprobfile', type=str, required=True)
    subparser_rec.add_argument('-c', action='store', dest='expr_threshold', type=float, default=1.5)
    subparser_rec.add_argument('-s', action='store', dest='sigma', type=float, default=0.12)
    subparser_rec.add_argument('-o', action='store', dest='outdir', type=str, default='.')
    subparser_rec.set_defaults(func=gbrs.commands.reconstruct)


#
# Subcommand: interpolate
#
def add_subcommand_interpolate(subparsers):
    subparser_interp = subparsers.add_parser('interpolate')
    subparser_interp.add_argument('-p', action='store', dest='gposfile', type=str, default=None)
    subparser_interp.add_argument('-g', action='store', dest='gridfile', type=str, required=True)
    subparser_interp.add_argument('-i', action='store', dest='probfile', type=str, required=True)
    subparser_interp.add_argument('-o', action='store', dest='outfile', type=str, required=True)
    subparser_interp.set_defaults(func=gbrs.commands.interpolate)


#
# Subcommand: plot
#
def add_subcommand_plot(subparsers):
    subparser_plot = subparsers.add_parser('plot')
    subparser_plot.add_argument('-i', '--genoprob', action='store', dest='gpbfile', type=str, required=True)
    subparser_plot.add_argument('-o', '--outfile', action='store', dest='outfile', type=str, default='gbrs.plot.pdf')
    subparser_plot.add_argument('-n', '--sample-name', action='store', dest='sample_name', type=str, default='')
    subparser_plot.add_argument('--num-grids', action='store', dest='grid_size', type=int, default=42586)
    subparser_plot.add_argument('--xt-max', action='store', dest='xt_max', type=int, default=4501)
    subparser_plot.add_argument('--xt-size', action='store', dest='xt_size', type=int, default=475)
    subparser_plot.add_argument('--grid-width', action='store', dest='width', type=float, default=0.01)
    subparser_plot.set_defaults(func=gbrs.commands.plot)


def main():

    #
    # Main command parser
    #

    parser = argparse.ArgumentParser(version=gbrs.__version__)
    subparsers = parser.add_subparsers(dest='action')

    #
    # Add sub-commands
    #
    add_subcommand_hybridize(subparsers)
    add_subcommand_align(subparsers)
    add_subcommand_bam2emase(subparsers)
    add_subcommand_quantify(subparsers)
    add_subcommand_reconstruct(subparsers)
    add_subcommand_interpolate(subparsers)
    add_subcommand_plot(subparsers)

    #
    # Execute command
    #
    args = parser.parse_args()
    if args.action is None:
        parser.print_help()
    else:
        kws = dict(vars(args))
        args.func(**kws)


if __name__ == "__main__":
    sys.exit(main())
